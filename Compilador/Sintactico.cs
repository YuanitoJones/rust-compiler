using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Compilador
{
    class Sintactico
    {
        matrizSintactica.Columna BuscarColumna = new matrizSintactica.Columna();
        matrizSintactica.Renglon BuscarRenglon = new matrizSintactica.Renglon();

        public List<Errores> listaError;

        public List<Token> listaToken; //Cola xd

        private int[] listaSintactico = new int[80]; //Pila

        public bool error = false;
        
        bool salir = false;

        int punteroLexico = 0;
        int punteroSintactico = 1;

        int recuperacion;
        TipoRecuperacion tiporecuperacion;

        #region semantico

        /// <summary>
        /// SEMANTICO
        /// </summary>
        TipoSemantico swSemantico;
        public List<Token> listenerSemantico = new List<Token>();
        enum TipoSemantico
        {
            Ninguno,

            ClaseIN,
            ClassOUT,

            HerenciaIN,
            HerenciaOUT,

            ParametrosIN,
            ParametrosOUT,

            MetodoIN,
            MetodoOUT,

            AtributosIN,
            ATributosOUT,

            VariablesIN,
            VariablesOUT,

            AsignacionIN,
            AsignacionOUT
        }

        #endregion

        public int[,] matrizTransicionSintactico = new int[,]
        {
                            // id  |  num  |  dec  |cadena| carac |  +  |  -  |  *  |  /  |  %  |  &  |  |  |  ^  |  !  |  ==  |  !=  |  <  |  >  |  <=  |  >=  |  +=  |  -=  |  *=  |  /=  |  %=  |  &=  |  |=  |  ^=  |  >>  |  <<  |  >>=  |  <<=  |  =  |  ||  |  &&  |  {  |  }  |  [  |  ]  |  (  |  )  |  ->  |  ;  |  .  |  ,  |  ?  |  @  |  _  |  ..  |  …  |  ..=  |  :  |  ::  |  =>  |  #  |  $  |  as  | break | const |continue| crate | else | enum | extern | false |  fn  | for |  if  | impl |  in  | let | loop | match |  mod  | move | mut | pub | ref |return| self | Self |static|struct| super | trait | true | type |unsafe| use | where | while | async | await | dyn |abstract|become| box |  do  | final | macro |override| priv |typeof|unsized|virtual| yield |  try  | union |println!| dbg! |panic!| i32 | f32 |String| &str | bool | main | Tuple |	 io  | stdin |read_line|  ok  |expect|  ~
/*1000*/   /*s*/             {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 ,   1  ,  -600  ,  -600 ,   1  , -600, -600 ,   1  , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,   1 , -600, -600 , -600 , -600 , -600 ,   1  ,  -600 ,  -600 , -600 , -600 , -600 ,   1 ,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1001*/   /*programa*/      {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 ,   2  ,  -600  ,  -600 ,   2  , -600, -600 ,   2  , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,   2 , -600, -600 , -600 , -600 , -600 ,   2  ,  -600 ,  -600 , -600 , -600 , -600 ,   2 ,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1002*/   /*herencia*/      {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 ,   4 , -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 ,   4  ,  -600  ,  -600 ,   4  , -600, -600 ,   4  , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,   4 , -600, -600 , -600 , -600 , -600 ,   4  ,  -600 ,  -600 , -600 , -600 , -600 ,   3 ,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,   4 },
/*1003*/   /*herencias*/     {},
/*1004*/   /*herencias1*/    {-601 ,  -601 ,  -601 , -601 ,  -601 , -601, -601, -601, -601, -601, -601, -601, -601, -601, -601 , -601 , -601, -601, -601 , -601 , -601 , -601 , -601 , -601 , -601 , -601 , -601 , -601 , -601 , -601 ,  -601 ,  -601 , -601, -601 , -601 , -601, -601, -601, -601, -601, -601, -601 ,   6 , -601, -601, -601, -601, -601, -601 , -601,  -601 , -601,   7  , -601 , -601, -601, -601 ,  -601 ,  -601 ,  -601  ,  -601 , -601 , -601 ,  -601  ,  -601 , -601 , -601, -601 , -601 , -601 , -601, -601 ,  -601 ,  -601 , -601 , -601, -601, -601, -601 , -601 , -601 , -601 , -601 ,  -601 ,  -601 , -601 , -601 , -601 , -601,  -601 ,  -601 ,  -601 ,  -601 , -601,  -601  , -601 , -601, -601 ,  -601 ,  -601 ,  -601  , -601 , -601 ,  -601 ,  -601 ,  -601 ,  -601 ,  -601 ,  -601  , -601 , -601 , -601, -601, -601 , -601 , -601 , -601 ,  -601 ,  -601  ,  -601 ,   -601  , -601 , -601 , -601},
/*1005*/   /*confun*/        {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,   9 , -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 ,   9  ,  -600  ,  -600 ,   8  , -600, -600 ,   9  , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,   8 , -600, -600 , -600 , -600 , -600 ,   9  ,  -600 ,  -600 , -600 , -600 , -600 ,   9 ,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,   9 },
/*1006*/   /*confun1*/       {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  10  , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,  10 , -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1007*/   /*confun2*/       { 14  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 ,  13  ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1008*/   /*alcance*/       {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  11  , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,  12 , -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1009*/   /*parametro*/     { 16  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600,  15 , -600 , -600, -600,  16 , -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 ,  16 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1010*/   /*parametros*/    { 25  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600,  24 , -600 , -600, -600,  127, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1011*/   /*mutar*/         { 17  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 ,  18 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  17 },
/*1012*/   /*tipodato*/      {},
/*1013*/   /*return*/        {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 ,  26 , -600, -600, -600, -600, -600,  27  , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1014*/   /*estructura*/    {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 ,  30  ,  -600  ,  -600 ,  28  , -600, -600 ,  31  , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600,  28 , -600, -600 , -600 , -600 , -600 ,  29  ,  -600 ,  -600 , -600 , -600 , -600 ,  28 ,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  28 },
/*1015*/   /*estructuras*/   { 32  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,   33  ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1016*/   /*estructuras1*/  {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 ,  35 , -600, -600, -600, -600, -600, -600 ,  34 , -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1017*/   /*estructuras2*/  {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600,  36 , -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1018*/   /*enum*/          { 38  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  37 , -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1019*/   /*enum1*/         {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  39 , -600, -600, -600, -600, -600 , -600, -600,  40 , -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 , -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  39 },
/*1020*/   /*sentencia*/     { 42  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  41 , -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 ,  42 ,  42  , -600 , -600 ,  42 ,  42  ,   42  ,  -600 , -600 ,  42 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,   42  ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,   42   , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,   42   ,  -600 ,   -600  , -600 , -600 ,  42 },
/*1021*/   /*sentencias*/    { 65  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 , -600 ,  69 ,  68  , -600 , -600 ,  65 ,  71  ,   70  ,  -600 , -600 ,  65 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,   72  ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,   67   , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,   66   ,  -600 ,   -600  , -600 , -600 , -600},
/*1022*/   /*asignacion*/    { 43  ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 ,  44 , -600 ,  -600 ,  -600 , -600 ,  44 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1023*/   /*asigcom*/       {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 ,  46  ,  47  ,  48  ,  49  ,  50  ,  51  ,  52  ,  53  ,  54  ,  55  ,   56  ,   57  ,  45 , -600 , -600 , -600, -600, -600, -600,  124, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1024*/   /*deftipo*/       {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 ,  58  ,  58  ,  58  ,  58  ,  58  ,  58  ,  58  ,  58  , -600 , -600 ,  -600 ,  -600 ,  58 , -600 , -600 , -600, -600, -600, -600,  58 , -600, -600 ,  58 , -600, -600, -600, -600, -600, -600 , -600,  -600 ,  59 , -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1025*/   /*valor*/         { 62  ,   60  ,   61  ,  63  ,   64  , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   126 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  125 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1026*/   /*if*/            {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600,  73  , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1027*/   /*let*/           { 74  ,   74  ,   74  ,  74  ,   74  , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   74  ,  -600, -600, -600 , -600 , -600 ,  75 , -600 ,  -600 ,  -600 , -600 ,  74 , -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  74  , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  74 },
/*1028*/   /*expresion*/     { 76  ,   76  ,   76  ,  76  ,   76  , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   76  ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  76  , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1029*/   /*termino*/       {-600 ,  -600 ,  -600 , -600 ,  -600 ,  78 ,  78 ,  78 ,  78 ,  78 ,  77 ,  77 ,  77 ,  77 ,  77  ,  77  ,  77 ,  77 ,  77  ,  77  ,  79  ,  79  ,  79  ,  79  ,  79  ,  79  ,  79  ,  79  ,  79  ,  79  ,   79  ,   79  ,  79 , -600 , -600 ,  77 ,  77 , -600, -600,  77 ,  77 , -600 ,  77 ,  77 ,  77 , -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1030*/   /*oparitmetico*/  {-600 ,  -600 ,  -600 , -600 ,  -600 ,  80 ,  81 ,  82 ,  83 ,  84 , -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1031*/   /*oplogico*/      {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600,  91 ,  92 ,  93 ,  94 ,  85  ,  86  ,  88 ,  87 ,  90  ,  89  , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1032*/   /*else*/          {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  95 , -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 ,  96  , -600 ,  -600  ,  -600 ,  -600,  95 ,  95  , -600 , -600 ,  95 ,  95  ,   95  ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,   95  ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,   95   , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,   95   ,  -600 ,   -600  , -600 , -600 ,  95 },
/*1033*/   /*if2*/           {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 ,  97 , -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600,  98  , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1034*/   /*for*/           {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600,  99 , -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1035*/   /*rango*/         { 100 ,   100 ,   100 ,  100 ,   100 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   100 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  100 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1036*/   /*rangos*/        {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600,  101 , -600,   102 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1037*/   /*match*/         {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,   103 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1038*/   /*loop*/          {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600,  104 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1039*/   /*while*/         {},
/*1040*/   /*leer*/          {},
/*1041*/   /*escribir*/      {},
/*1042*/   /*obj*/           {-600 ,  -600 ,  -600 , -600 ,  -600 ,  108,  108,  108,  108,  108,  108,  108,  108,  108,  108 ,  108 ,  108,  108,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,  108 ,   108 ,   108 ,  108, -600 , -600 , -600, -600, -600, -600,  108, -600, -600 ,  108,  109, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1043*/   /*param*/         { 110 ,   110 ,   110 ,  110 ,   110 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600,  111, -600 , -600, -600,  110, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  111},
/*1044*/   /*params*/        { 112 ,   112 ,   112 ,  112 ,   112 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600,  112, -600 , -600, -600,  113, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   112 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  112 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1045*/   /*expopc*/        {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600,  114, -600 , -600, -600,  115, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1046*/   /*varinv*/        { 117 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  116, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600,  116,  116 , -600 , -600 ,  117,  116 ,   116 ,  -600 , -600 ,  117, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,   116 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,   116  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  116},
/*1047*/   /*varinv2*/       {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 ,  118 ,  118 ,  118 ,  118 ,  118 ,  118 ,  118 ,  118 , -600 , -600 ,  -600 ,  -600 ,  118, -600 , -600 , -600, -600, -600, -600,  118, -600, -600 ,  118, -600, -600, -600, -600, -600, -600 , -600,  -600 ,  118, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1048*/   /*final*/         {-600 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  119, -600, -600, -600, -600, -600 ,  120, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 ,  119},
/*1049*/   /*asigobj*/       { 123 ,   123 ,   123 ,  123 ,   123 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600,  121, -600, -600,  122, -600, -600 ,  121,  122, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,   123 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 , -600, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 ,  123 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600},
/*1050*/   /*parametros1*/   { 128 ,  -600 ,  -600 , -600 ,  -600 , -600, -600, -600, -600, -600, -600, -600, -600, -600, -600 , -600 , -600, -600, -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600, -600 , -600 , -600, -600, -600, -600, -600, -600, -600 , -600, -600, -600, -600, -600, -600, -600 , -600,  -600 , -600, -600 , -600 , -600, -600, -600 ,  -600 ,  -600 ,  -600  ,  -600 , -600 , -600 ,  -600  ,  -600 ,  -600, -600, -600 , -600 , -600 , -600, -600 ,  -600 ,  -600 , -600 ,  128, -600, -600, -600 , -600 , -600 , -600 , -600 ,  -600 ,  -600 , -600 , -600 , -600 , -600,  -600 ,  -600 ,  -600 ,  -600 , -600,  -600  , -600 , -600, -600 ,  -600 ,  -600 ,  -600  , -600 , -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600 ,  -600  , -600 , -600 , -600, -600, -600 , -600 , -600 , -600 ,  -600 ,  -600  ,  -600 ,   -600  , -600 , -600 , -600}
        };

        public int[,] RepositorioReglas = new int[,]
        {
       /*0*/   /*s*/             {1001, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*1*/   /*programa*/      {1005, 1014, 1002, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*2*/   /*herencia*/      {1002, 1003, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*3*/   /*herencia*/      {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*4*/   /*herencias*/     {-50, 1004, -1, -96, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*5*/   /*herencias1*/    {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*6*/   /*herencias1*/    {1004, -1, -60, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*7*/   /*confun*/        {1005, 1006, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*8*/   /*confun*/        {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
       /*9*/   /*confun1*/       {-44, 1020, -43, 1013, -48, 1009, -47, 1007, -73, 1008, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*10*/   /*alcance*/       {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*11*/   /*alcance*/       {-84, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*12*/   /*confun2*/       {-156, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*13*/   /*confun2*/       {-1, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*14*/   /*parametro*/     {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*15*/   /*parametro*/     {1009, 1010, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*16*/   /*mutar*/         {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*17*/   /*mutar*/         { -83, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*18*/   /*tipodato*/      {-151, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*19*/   /*tipodato*/      {-152, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*20*/   /*tipodato*/      {-153, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*21*/   /*tipodato*/      {-154, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*22*/   /*tipodato*/      {-155, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*23*/   /*parametros*/    {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*24*/   /*parametros*/    {1050, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*25*/   /*return*/        {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*26*/   /*return*/        {1012, -49, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*27*/   /*estructura*/    {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*28*/   /*estructura*/    {1014, 1015, -90, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*29*/   /*estructura*/    {1014, 1015, -70, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*30*/   /*estructura*/    {-44, 1005, -43, -1, -76, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*31*/   /*estructuras*/   {1016, -1, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*32*/   /*estructuras*/   {1017, -157, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*33*/   /*estructuras1*/  {-50, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*34*/   /*estructuras1*/  {-44, 1018, -43, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*35*/   /*estructuras2*/  {-50, -48, 1012, -52, 1012, -47, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*36*/   /*enum*/          {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*37*/   /*enum*/          {1019, 1012, -59, -1, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*38*/   /*enum1*/         {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*39*/   /*enum1*/         {1018, -52, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*40*/   /*sentencia*/     {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*41*/   /*sentencia*/     {1020, 1021, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*42*/   /*asignacion*/    {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*43*/   /*asignacion*/    {1011, 1027, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*44*/   /*asigcom*/       {-40, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*45*/   /*asigcom*/       {-28, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*46*/   /*asigcom*/       {-29, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*47*/   /*asigcom*/       {-30, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*48*/   /*asigcom*/       {-31, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*49*/   /*asigcom*/       {-32, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*50*/   /*asigcom*/       {-33, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*51*/   /*asigcom*/       {-34, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*52*/   /*asigcom*/       {-35, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*53*/   /*asigcom*/       {-36, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*54*/   /*asigcom*/       {-37, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*55*/   /*asigcom*/       {-39, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*56*/   /*asigcom*/       {-38, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*57*/   /*deftipo*/       {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*58*/   /*deftipo*/       {1012, -59, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*59*/   /*valor*/         {-2, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*60*/   /*valor*/         {-3, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*61*/   /*valor*/         {-1, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*62*/   /*valor*/         {-4, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*63*/   /*valor*/         {-5, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*64*/   /*sentencias*/    {1046, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*65*/   /*sentencias*/    {1040, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*66*/   /*sentencias*/    {1041, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*67*/   /*sentencias*/    {1026, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*68*/   /*sentencias*/    {1034, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*69*/   /*sentencias*/    {1037, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*70*/   /*sentencias*/    {1038, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*71*/   /*sentencias*/    {1039, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*72*/   /*if*/            {1032, -44, 1020, -43, 1028, 1031, 1028, 1027, -75, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*73*/   /*let*/           {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*74*/   /*let*/           {-78, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*75*/   /*expresion*/     {1029, 1025, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*76*/   /*termino*/       {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*77*/   /*termino*/       {1028, 1030, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*78*/   /*termino*/       {1028, 1023, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*79*/   /*oparitmetico*/  {-13, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*80*/   /*oparitmetico*/  {-14, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*81*/   /*oparitmetico*/  {-15, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*82*/   /*oparitmetico*/  {-16, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*83*/   /*oparitmetico*/  {-17, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*84*/   /*oplogico*/      {-22, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*85*/   /*oplogico*/      {-23, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*86*/   /*oplogico*/      {-25, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*87*/   /*oplogico*/      {-24, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*88*/   /*oplogico*/      {-27, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*89*/   /*oplogico*/      {-26, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*90*/   /*oplogico*/      {-18, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*91*/   /*oplogico*/      {-19, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*92*/   /*oplogico*/      {-20, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*93*/   /*oplogico*/      {-21, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*94*/   /*else*/          {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*95*/   /*else*/          {1033, -69, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*96*/   /*if2*/           {-44, 1020, -43, -150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*97*/   /*if2*/           {1026, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*98*/   /*for*/           {-44, 1020, -43, 1035, -77, -1, -74, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      /*99*/   /*rango*/         {1036, 1025, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*100*/   /*rangos*/        {1025, -56, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*101*/   /*rangos*/        {1025, -58, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*102*/   /*match*/         {-44, 1020, -43, -1, -80, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*103*/   /*loop*/          {-44, 1020, -43, -79, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*104*/   /*while*/         {-44, 1020, -43, 1028, 1031, 1028, 1027, -98, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*105*/   /*leer*/          {-50, -48, -4, -47, -162, -51, -48, -47, -161, -51, -48, -1, -83, -47, -160, -51, -48, -47,  -159, -60, -158, -200},
     /*106*/   /*escribir*/      {-50, -48, 1045, 1028, -47, -116, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*107*/   /*obj*/           {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*108*/   /*obj*/           {1042, -1, -51, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*109*/   /*param*/         {1043, 1044, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*110*/   /*param*/         {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*111*/   /*params*/        {1043, 1025, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*112*/   /*params*/        {1044, -52, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*113*/   /*expopc*/        {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*114*/   /*expopc*/        {1045, 1028, -52, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*115*/   /*varinv*/        {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*116*/   /*varinv*/        {1046, 1047, 1042, -1, 1022, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},       
     /*117*/   /*varinv2*/       {1048, 1049, 1023, 1024, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*118*/   /*final*/         {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*119*/   /*final*/         {-50, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*120*/   /*asigobj*/       {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*121*/   /*asigobj*/       {1049, -48, 1043, -47, 1042, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*122*/   /*asigobj*/       {1049, 1028, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*123*/   /*asigcom*/       {-150, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*124*/   /*valor*/         {-93, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*125*/   /*valor*/         {-72, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*126*/   /*parametros*/    {1050, -52, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
     /*127*/   /*parametros1*/   {1009, 1012, -59, -1, 1011, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

        public Sintactico(List<Token> listaTokenLexico)
        {
            //inicializo todo para poder empezar el analisis.
            listaError = new List<Errores>();
            TablaSimbolos.listaErroresSemantico = new List<Errores>();
            TablaSimbolos.TablaSimbolosClase = new Dictionary<object, NodoClase>();//Aqui deberia ser string, NodoClase pero da error, lo cambiaremos despues
            listaToken = listaTokenLexico; // copia de la lisat de tokens original
            listaToken.Add(new Token() { Caracteres = "~", Linea = 0, Tipotoken = Tipotokens.cadena, Valor = -201 });

            listaSintactico[0] = -201; // estoy insertando ~
            listaSintactico[1] = 1000; // S

            recuperacion = 0;
            tiporecuperacion = TipoRecuperacion.Ninguno;
        }


        // sintactico        
        public void EjecutarSintactico(List<Token> listaTokens)
        {
            //incializo variables locales necesarias
            int renglon, columna = 0;
            int regla;

            do
            {
                
                //Escuchador();

                if (listaSintactico[punteroSintactico] < 0)   // el elemento de la lista es un terminal (TOKEN)????
                {
                    if (listaSintactico[punteroSintactico] == -150)// es lamda ese terminal?
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }
                    
                    else if (listaSintactico[punteroSintactico] == listaToken[punteroLexico].Valor)  // los dos elementos son iguales
                    {
                        if (listaSintactico[punteroSintactico] == -201)  // los dos son simbolo final ????~
                        {
                            salir = true;
                            if (error)
                                MessageBox.Show(@"Analisis Sintactico Terminado, Con Errores");
                            else
                                MessageBox.Show(@"Analisis Sintactico Terminado Correctamente");
                            break;

                        }
                        else    //MATCH (elemento)
                        {
                            //if (swSemantico != TipoSemantico.Ninguno)
                                //codigoSemantico();

                            listaSintactico[punteroSintactico] = 0;
                            punteroLexico++;
                            punteroSintactico--;
                            VerificarRecuperacion();
                        }
                    }
                    else  // si los dos terminales de la lista token y de la lista sintactico no son iguales
                    {
                        NuevoError(listaTokens, ref salir, 1);
                    }
                }
                else  // NUMERO POSITIVO : es la parte de traerme la regla del repositorio con ayuda de la matriz
                {
                    renglon = BuscarRenglon.convertir(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna.convertir(listaTokens[punteroLexico].Valor);

                    regla = matrizTransicionSintactico[renglon, columna];

                    if (regla > 0)  // llamamos a la insersion de reglas.
                    {
                        InsertarRegla(regla);
                        VerificarRecuperacion();
                    }
                    else  // ejecutarr el manejo de errores
                    {
                        if (recuperacion < 1)
                        {
                            tiporecuperacion = TipoRecuperacion.Sobra;
                        }
                        NuevoError(listaTokens, ref salir, regla);
                    }
                }
            } while (salir != true);
        }


        /// <summary>
        /// inserto las reglas al LIFO (estructa sintactica)
        /// </summary>
        /// <param name="regla"></param>
        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroSintactico] = RepositorioReglas[regla - 1, i];
                punteroSintactico++;
                i++;
            } while (RepositorioReglas[regla - 1, i] != -200);
            punteroSintactico--;
        }

        #region VERIFICACION DE ERRORES

        private void Escuchador()
        {
            switch (listaSintactico[punteroSintactico])
            {
                case 1002:
                    swSemantico = TipoSemantico.HerenciaIN;
                    break;
                case 1007://regla de la clase
                    swSemantico = TipoSemantico.ClaseIN;
                    break;
                case 1005:
                    swSemantico = TipoSemantico.MetodoIN;
                    break;
                case 1009:
                    swSemantico = TipoSemantico.ParametrosIN;
                    break;
                case 1022:
                    swSemantico = TipoSemantico.AsignacionIN;//Aqui no se como diferenciar el de variable con asignacion
                    break;
            }
        }
        
        private void codigoSemantico()
        {
            //En los if puse en comentarios que representa cada valor de token
            listenerSemantico.Add(listaToken[punteroLexico]);
            if (listaToken[punteroLexico].Valor == -76 /* impl */ && swSemantico == TipoSemantico.ClaseIN)
                swSemantico = TipoSemantico.ClassOUT;
            if (listaToken[punteroLexico].Valor == -43 /* { */ && swSemantico == TipoSemantico.MetodoIN)
                swSemantico = TipoSemantico.MetodoOUT;
            if (listaToken[punteroLexico].Valor == -96  /* use */ && swSemantico == TipoSemantico.HerenciaIN)
                swSemantico = TipoSemantico.HerenciaOUT;
            if (listaToken[punteroLexico].Valor == -78 /* let */ || listaToken[punteroLexico].Valor == -1 /* id */&& swSemantico == TipoSemantico.AsignacionIN)
                swSemantico = TipoSemantico.AsignacionOUT;
            if (listaToken[punteroLexico].Valor == -47 /* ( */ && swSemantico == TipoSemantico.ParametrosIN)
                swSemantico = TipoSemantico.ParametrosOUT;

            if (swSemantico == TipoSemantico.ClassOUT)
            {
                //int puntero2 = 0;
                //NodoClase minodoclase = new NodoClase();
            }
            if(swSemantico == TipoSemantico.MetodoOUT)
            {
                int puntero2 = 0;
                NodoMetodo metodo = new NodoMetodo();
                metodo.miAlcance = Alcance.Private;
                if (listenerSemantico[puntero2].Valor == -84)
                {
                    metodo.miAlcance = Alcance.Public;
                    puntero2++;
                }
                puntero2++;//Palabra reservada fn
                metodo.lexema = listenerSemantico[puntero2].Caracteres;
                puntero2++;
                if (listenerSemantico[puntero2].Valor == -47)
                {
                    NodoVariable minodovariable;
                    puntero2++;
                    while (listenerSemantico[puntero2].Valor == -1)//Mientras se encuentren parametros de metodo
                    {
                        minodovariable = new NodoVariable();
                        minodovariable.lexema = listenerSemantico[puntero2].Caracteres;
                        puntero2 += 2; // se salta : para definir tipo de variable
                        if (listenerSemantico[puntero2].Valor == -163)
                            minodovariable.miTipoDato = TipoDato.CHAR;
                        else if (listenerSemantico[puntero2].Valor < -150 && listenerSemantico[puntero2].Valor > -155)
                        {
                            switch (listenerSemantico[puntero2].Valor)
                            {
                                case -151:
                                    minodovariable.miTipoDato = TipoDato.i32;
                                    break;
                                case -152:
                                    minodovariable.miTipoDato = TipoDato.f32;
                                    break;
                                case -153:
                                    minodovariable.miTipoDato = TipoDato.STRING;
                                    break;
                                case -155:
                                    minodovariable.miTipoDato = TipoDato.BOOL;
                                    break;
                            }
                            puntero2++;
                        }
                        if (listenerSemantico[puntero2].Valor == -52)//Si se encuentra una , es porque hay mas parametros
                            puntero2++;
                    }
                    puntero2++; //se salta )
                    if (listenerSemantico[puntero2].Valor == -43)
                    {
                        metodo.renglonDeclaracion = listenerSemantico[puntero2].Linea;
                    }
                }
            }
            if(swSemantico == TipoSemantico.HerenciaOUT)
            {

            }
        }

        private void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[punteroLexico].Linea);
            listaError.Add(nuevoError);
            revision = true;
            //Recuperar(ref revision, ref tiporecuperacion);

        }

        private void VerificarRecuperacion()
        {
            if (tiporecuperacion != TipoRecuperacion.Ninguno)
            {
                tiporecuperacion = TipoRecuperacion.Ninguno;
                recuperacion = 0;
            }
        }

        private Errores ManejodeErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:  // cuando son terminales 
                    mensajeError = "se esperaba el simbolo: " + listaSintactico[punteroSintactico];
                    break;
                case -600:
                    mensajeError = "se esperaba una estructura de clase o librería.";
                    break;
                case -601:
                    mensajeError = "se esperaba una estructura de librería. ";
                    break;
                case -602:
                    mensajeError = "se esperaba una estructura de herencia ";
                    break;
                case -603:
                    mensajeError = "se esperaba un miembro de una clase ";
                    break;
                case -604:
                    mensajeError = "se esperaba una estructura de clase ";
                    break;
                case -605:
                    mensajeError = "se esperaba un Alcance ";
                    break;

                default:
                    break;
            }
            return new Errores() { Valorerror = error, Mensaje = mensajeError, Tipoerror = TipoError.Sintactico, Linea = linea };

        }
        private void Recuperar(ref bool revision, ref TipoRecuperacion tipo)
        {
            if (recuperacion > 3)
            {
                tipo = TipoRecuperacion.Bai;
            }

            recuperacion++;

            switch (tipo)
            {
                case TipoRecuperacion.Ninguno:
                    punteroSintactico--;
                    tipo++;
                    break;
                case TipoRecuperacion.Falta:
                    punteroSintactico--;  // muevo sintactio
                    if (recuperacion == 3)
                    {
                        punteroSintactico += 3;
                        tipo = TipoRecuperacion.Diferentes;
                    }
                    break;
                case TipoRecuperacion.Sobra:
                    if (recuperacion == 3)
                    {
                        punteroLexico -= 2;
                        tipo = TipoRecuperacion.Falta;
                    }
                    punteroLexico++;  // muevo lexico
                    break;
                case TipoRecuperacion.Diferentes:
                    punteroLexico++;   // muevo ambos
                    punteroSintactico--;
                    break;

                default:
                    revision = true;
                    MessageBox.Show(@"Analisis Sintactico no se recupero, paro fulminante");
                    break;
            }
        }
        #endregion
    }
}